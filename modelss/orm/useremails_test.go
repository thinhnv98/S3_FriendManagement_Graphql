// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUseremails(t *testing.T) {
	t.Parallel()

	query := Useremails()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUseremailsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Useremail{}
	if err = randomize.Struct(seed, o, useremailDBTypes, true, useremailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Useremail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Useremails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUseremailsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Useremail{}
	if err = randomize.Struct(seed, o, useremailDBTypes, true, useremailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Useremail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Useremails().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Useremails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUseremailsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Useremail{}
	if err = randomize.Struct(seed, o, useremailDBTypes, true, useremailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Useremail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UseremailSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Useremails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUseremailsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Useremail{}
	if err = randomize.Struct(seed, o, useremailDBTypes, true, useremailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Useremail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UseremailExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Useremail exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UseremailExists to return true, but got false.")
	}
}

func testUseremailsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Useremail{}
	if err = randomize.Struct(seed, o, useremailDBTypes, true, useremailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Useremail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	useremailFound, err := FindUseremail(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if useremailFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUseremailsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Useremail{}
	if err = randomize.Struct(seed, o, useremailDBTypes, true, useremailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Useremail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Useremails().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUseremailsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Useremail{}
	if err = randomize.Struct(seed, o, useremailDBTypes, true, useremailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Useremail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Useremails().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUseremailsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	useremailOne := &Useremail{}
	useremailTwo := &Useremail{}
	if err = randomize.Struct(seed, useremailOne, useremailDBTypes, false, useremailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Useremail struct: %s", err)
	}
	if err = randomize.Struct(seed, useremailTwo, useremailDBTypes, false, useremailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Useremail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = useremailOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = useremailTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Useremails().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUseremailsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	useremailOne := &Useremail{}
	useremailTwo := &Useremail{}
	if err = randomize.Struct(seed, useremailOne, useremailDBTypes, false, useremailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Useremail struct: %s", err)
	}
	if err = randomize.Struct(seed, useremailTwo, useremailDBTypes, false, useremailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Useremail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = useremailOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = useremailTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Useremails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func useremailBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Useremail) error {
	*o = Useremail{}
	return nil
}

func useremailAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Useremail) error {
	*o = Useremail{}
	return nil
}

func useremailAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Useremail) error {
	*o = Useremail{}
	return nil
}

func useremailBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Useremail) error {
	*o = Useremail{}
	return nil
}

func useremailAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Useremail) error {
	*o = Useremail{}
	return nil
}

func useremailBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Useremail) error {
	*o = Useremail{}
	return nil
}

func useremailAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Useremail) error {
	*o = Useremail{}
	return nil
}

func useremailBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Useremail) error {
	*o = Useremail{}
	return nil
}

func useremailAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Useremail) error {
	*o = Useremail{}
	return nil
}

func testUseremailsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Useremail{}
	o := &Useremail{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, useremailDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Useremail object: %s", err)
	}

	AddUseremailHook(boil.BeforeInsertHook, useremailBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	useremailBeforeInsertHooks = []UseremailHook{}

	AddUseremailHook(boil.AfterInsertHook, useremailAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	useremailAfterInsertHooks = []UseremailHook{}

	AddUseremailHook(boil.AfterSelectHook, useremailAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	useremailAfterSelectHooks = []UseremailHook{}

	AddUseremailHook(boil.BeforeUpdateHook, useremailBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	useremailBeforeUpdateHooks = []UseremailHook{}

	AddUseremailHook(boil.AfterUpdateHook, useremailAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	useremailAfterUpdateHooks = []UseremailHook{}

	AddUseremailHook(boil.BeforeDeleteHook, useremailBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	useremailBeforeDeleteHooks = []UseremailHook{}

	AddUseremailHook(boil.AfterDeleteHook, useremailAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	useremailAfterDeleteHooks = []UseremailHook{}

	AddUseremailHook(boil.BeforeUpsertHook, useremailBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	useremailBeforeUpsertHooks = []UseremailHook{}

	AddUseremailHook(boil.AfterUpsertHook, useremailAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	useremailAfterUpsertHooks = []UseremailHook{}
}

func testUseremailsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Useremail{}
	if err = randomize.Struct(seed, o, useremailDBTypes, true, useremailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Useremail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Useremails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUseremailsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Useremail{}
	if err = randomize.Struct(seed, o, useremailDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Useremail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(useremailColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Useremails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUseremailToManyRequestorBlocks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Useremail
	var b, c Block

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, useremailDBTypes, true, useremailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Useremail struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, blockDBTypes, false, blockColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, blockDBTypes, false, blockColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.RequestorID = a.ID
	c.RequestorID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.RequestorBlocks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.RequestorID == b.RequestorID {
			bFound = true
		}
		if v.RequestorID == c.RequestorID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UseremailSlice{&a}
	if err = a.L.LoadRequestorBlocks(ctx, tx, false, (*[]*Useremail)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RequestorBlocks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RequestorBlocks = nil
	if err = a.L.LoadRequestorBlocks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RequestorBlocks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUseremailToManyTargetBlocks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Useremail
	var b, c Block

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, useremailDBTypes, true, useremailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Useremail struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, blockDBTypes, false, blockColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, blockDBTypes, false, blockColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TargetID = a.ID
	c.TargetID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TargetBlocks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TargetID == b.TargetID {
			bFound = true
		}
		if v.TargetID == c.TargetID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UseremailSlice{&a}
	if err = a.L.LoadTargetBlocks(ctx, tx, false, (*[]*Useremail)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TargetBlocks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TargetBlocks = nil
	if err = a.L.LoadTargetBlocks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TargetBlocks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUseremailToManyFirstFriends(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Useremail
	var b, c Friend

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, useremailDBTypes, true, useremailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Useremail struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, friendDBTypes, false, friendColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, friendDBTypes, false, friendColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.FirstID = a.ID
	c.FirstID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FirstFriends().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.FirstID == b.FirstID {
			bFound = true
		}
		if v.FirstID == c.FirstID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UseremailSlice{&a}
	if err = a.L.LoadFirstFriends(ctx, tx, false, (*[]*Useremail)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FirstFriends); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FirstFriends = nil
	if err = a.L.LoadFirstFriends(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FirstFriends); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUseremailToManySecondFriends(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Useremail
	var b, c Friend

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, useremailDBTypes, true, useremailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Useremail struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, friendDBTypes, false, friendColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, friendDBTypes, false, friendColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SecondID = a.ID
	c.SecondID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SecondFriends().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SecondID == b.SecondID {
			bFound = true
		}
		if v.SecondID == c.SecondID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UseremailSlice{&a}
	if err = a.L.LoadSecondFriends(ctx, tx, false, (*[]*Useremail)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SecondFriends); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SecondFriends = nil
	if err = a.L.LoadSecondFriends(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SecondFriends); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUseremailToManyRequestorSubscriptions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Useremail
	var b, c Subscription

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, useremailDBTypes, true, useremailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Useremail struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, subscriptionDBTypes, false, subscriptionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, subscriptionDBTypes, false, subscriptionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.RequestorID = a.ID
	c.RequestorID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.RequestorSubscriptions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.RequestorID == b.RequestorID {
			bFound = true
		}
		if v.RequestorID == c.RequestorID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UseremailSlice{&a}
	if err = a.L.LoadRequestorSubscriptions(ctx, tx, false, (*[]*Useremail)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RequestorSubscriptions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RequestorSubscriptions = nil
	if err = a.L.LoadRequestorSubscriptions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RequestorSubscriptions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUseremailToManyTargetSubscriptions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Useremail
	var b, c Subscription

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, useremailDBTypes, true, useremailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Useremail struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, subscriptionDBTypes, false, subscriptionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, subscriptionDBTypes, false, subscriptionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TargetID = a.ID
	c.TargetID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TargetSubscriptions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TargetID == b.TargetID {
			bFound = true
		}
		if v.TargetID == c.TargetID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UseremailSlice{&a}
	if err = a.L.LoadTargetSubscriptions(ctx, tx, false, (*[]*Useremail)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TargetSubscriptions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TargetSubscriptions = nil
	if err = a.L.LoadTargetSubscriptions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TargetSubscriptions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUseremailToManyAddOpRequestorBlocks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Useremail
	var b, c, d, e Block

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, useremailDBTypes, false, strmangle.SetComplement(useremailPrimaryKeyColumns, useremailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Block{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, blockDBTypes, false, strmangle.SetComplement(blockPrimaryKeyColumns, blockColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Block{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRequestorBlocks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.RequestorID {
			t.Error("foreign key was wrong value", a.ID, first.RequestorID)
		}
		if a.ID != second.RequestorID {
			t.Error("foreign key was wrong value", a.ID, second.RequestorID)
		}

		if first.R.Requestor != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Requestor != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RequestorBlocks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RequestorBlocks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RequestorBlocks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUseremailToManyAddOpTargetBlocks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Useremail
	var b, c, d, e Block

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, useremailDBTypes, false, strmangle.SetComplement(useremailPrimaryKeyColumns, useremailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Block{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, blockDBTypes, false, strmangle.SetComplement(blockPrimaryKeyColumns, blockColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Block{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTargetBlocks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TargetID {
			t.Error("foreign key was wrong value", a.ID, first.TargetID)
		}
		if a.ID != second.TargetID {
			t.Error("foreign key was wrong value", a.ID, second.TargetID)
		}

		if first.R.Target != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Target != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TargetBlocks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TargetBlocks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TargetBlocks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUseremailToManyAddOpFirstFriends(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Useremail
	var b, c, d, e Friend

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, useremailDBTypes, false, strmangle.SetComplement(useremailPrimaryKeyColumns, useremailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Friend{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, friendDBTypes, false, strmangle.SetComplement(friendPrimaryKeyColumns, friendColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Friend{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFirstFriends(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.FirstID {
			t.Error("foreign key was wrong value", a.ID, first.FirstID)
		}
		if a.ID != second.FirstID {
			t.Error("foreign key was wrong value", a.ID, second.FirstID)
		}

		if first.R.First != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.First != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FirstFriends[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FirstFriends[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FirstFriends().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUseremailToManyAddOpSecondFriends(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Useremail
	var b, c, d, e Friend

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, useremailDBTypes, false, strmangle.SetComplement(useremailPrimaryKeyColumns, useremailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Friend{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, friendDBTypes, false, strmangle.SetComplement(friendPrimaryKeyColumns, friendColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Friend{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSecondFriends(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SecondID {
			t.Error("foreign key was wrong value", a.ID, first.SecondID)
		}
		if a.ID != second.SecondID {
			t.Error("foreign key was wrong value", a.ID, second.SecondID)
		}

		if first.R.Second != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Second != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SecondFriends[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SecondFriends[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SecondFriends().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUseremailToManyAddOpRequestorSubscriptions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Useremail
	var b, c, d, e Subscription

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, useremailDBTypes, false, strmangle.SetComplement(useremailPrimaryKeyColumns, useremailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Subscription{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, subscriptionDBTypes, false, strmangle.SetComplement(subscriptionPrimaryKeyColumns, subscriptionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Subscription{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRequestorSubscriptions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.RequestorID {
			t.Error("foreign key was wrong value", a.ID, first.RequestorID)
		}
		if a.ID != second.RequestorID {
			t.Error("foreign key was wrong value", a.ID, second.RequestorID)
		}

		if first.R.Requestor != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Requestor != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RequestorSubscriptions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RequestorSubscriptions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RequestorSubscriptions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUseremailToManyAddOpTargetSubscriptions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Useremail
	var b, c, d, e Subscription

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, useremailDBTypes, false, strmangle.SetComplement(useremailPrimaryKeyColumns, useremailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Subscription{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, subscriptionDBTypes, false, strmangle.SetComplement(subscriptionPrimaryKeyColumns, subscriptionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Subscription{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTargetSubscriptions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TargetID {
			t.Error("foreign key was wrong value", a.ID, first.TargetID)
		}
		if a.ID != second.TargetID {
			t.Error("foreign key was wrong value", a.ID, second.TargetID)
		}

		if first.R.Target != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Target != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TargetSubscriptions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TargetSubscriptions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TargetSubscriptions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUseremailsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Useremail{}
	if err = randomize.Struct(seed, o, useremailDBTypes, true, useremailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Useremail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUseremailsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Useremail{}
	if err = randomize.Struct(seed, o, useremailDBTypes, true, useremailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Useremail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UseremailSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUseremailsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Useremail{}
	if err = randomize.Struct(seed, o, useremailDBTypes, true, useremailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Useremail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Useremails().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	useremailDBTypes = map[string]string{`ID`: `bigint`, `Email`: `character varying`}
	_                = bytes.MinRead
)

func testUseremailsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(useremailPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(useremailAllColumns) == len(useremailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Useremail{}
	if err = randomize.Struct(seed, o, useremailDBTypes, true, useremailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Useremail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Useremails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, useremailDBTypes, true, useremailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Useremail struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUseremailsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(useremailAllColumns) == len(useremailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Useremail{}
	if err = randomize.Struct(seed, o, useremailDBTypes, true, useremailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Useremail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Useremails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, useremailDBTypes, true, useremailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Useremail struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(useremailAllColumns, useremailPrimaryKeyColumns) {
		fields = useremailAllColumns
	} else {
		fields = strmangle.SetComplement(
			useremailAllColumns,
			useremailPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UseremailSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUseremailsUpsert(t *testing.T) {
	t.Parallel()

	if len(useremailAllColumns) == len(useremailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Useremail{}
	if err = randomize.Struct(seed, &o, useremailDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Useremail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Useremail: %s", err)
	}

	count, err := Useremails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, useremailDBTypes, false, useremailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Useremail struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Useremail: %s", err)
	}

	count, err = Useremails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
