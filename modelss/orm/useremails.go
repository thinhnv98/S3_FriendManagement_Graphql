// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Useremail is an object representing the database table.
type Useremail struct {
	ID    int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	Email string `boil:"email" json:"email" toml:"email" yaml:"email"`

	R *useremailR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L useremailL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UseremailColumns = struct {
	ID    string
	Email string
}{
	ID:    "id",
	Email: "email",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

var UseremailWhere = struct {
	ID    whereHelperint64
	Email whereHelperstring
}{
	ID:    whereHelperint64{field: "\"useremails\".\"id\""},
	Email: whereHelperstring{field: "\"useremails\".\"email\""},
}

// UseremailRels is where relationship names are stored.
var UseremailRels = struct {
	RequestorBlocks        string
	TargetBlocks           string
	FirstFriends           string
	SecondFriends          string
	RequestorSubscriptions string
	TargetSubscriptions    string
}{
	RequestorBlocks:        "RequestorBlocks",
	TargetBlocks:           "TargetBlocks",
	FirstFriends:           "FirstFriends",
	SecondFriends:          "SecondFriends",
	RequestorSubscriptions: "RequestorSubscriptions",
	TargetSubscriptions:    "TargetSubscriptions",
}

// useremailR is where relationships are stored.
type useremailR struct {
	RequestorBlocks        BlockSlice
	TargetBlocks           BlockSlice
	FirstFriends           FriendSlice
	SecondFriends          FriendSlice
	RequestorSubscriptions SubscriptionSlice
	TargetSubscriptions    SubscriptionSlice
}

// NewStruct creates a new relationship struct
func (*useremailR) NewStruct() *useremailR {
	return &useremailR{}
}

// useremailL is where Load methods for each relationship are stored.
type useremailL struct{}

var (
	useremailAllColumns            = []string{"id", "email"}
	useremailColumnsWithoutDefault = []string{"email"}
	useremailColumnsWithDefault    = []string{"id"}
	useremailPrimaryKeyColumns     = []string{"id"}
)

type (
	// UseremailSlice is an alias for a slice of pointers to Useremail.
	// This should generally be used opposed to []Useremail.
	UseremailSlice []*Useremail
	// UseremailHook is the signature for custom Useremail hook methods
	UseremailHook func(context.Context, boil.ContextExecutor, *Useremail) error

	useremailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	useremailType                 = reflect.TypeOf(&Useremail{})
	useremailMapping              = queries.MakeStructMapping(useremailType)
	useremailPrimaryKeyMapping, _ = queries.BindMapping(useremailType, useremailMapping, useremailPrimaryKeyColumns)
	useremailInsertCacheMut       sync.RWMutex
	useremailInsertCache          = make(map[string]insertCache)
	useremailUpdateCacheMut       sync.RWMutex
	useremailUpdateCache          = make(map[string]updateCache)
	useremailUpsertCacheMut       sync.RWMutex
	useremailUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var useremailBeforeInsertHooks []UseremailHook
var useremailBeforeUpdateHooks []UseremailHook
var useremailBeforeDeleteHooks []UseremailHook
var useremailBeforeUpsertHooks []UseremailHook

var useremailAfterInsertHooks []UseremailHook
var useremailAfterSelectHooks []UseremailHook
var useremailAfterUpdateHooks []UseremailHook
var useremailAfterDeleteHooks []UseremailHook
var useremailAfterUpsertHooks []UseremailHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Useremail) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range useremailBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Useremail) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range useremailBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Useremail) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range useremailBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Useremail) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range useremailBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Useremail) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range useremailAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Useremail) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range useremailAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Useremail) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range useremailAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Useremail) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range useremailAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Useremail) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range useremailAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUseremailHook registers your hook function for all future operations.
func AddUseremailHook(hookPoint boil.HookPoint, useremailHook UseremailHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		useremailBeforeInsertHooks = append(useremailBeforeInsertHooks, useremailHook)
	case boil.BeforeUpdateHook:
		useremailBeforeUpdateHooks = append(useremailBeforeUpdateHooks, useremailHook)
	case boil.BeforeDeleteHook:
		useremailBeforeDeleteHooks = append(useremailBeforeDeleteHooks, useremailHook)
	case boil.BeforeUpsertHook:
		useremailBeforeUpsertHooks = append(useremailBeforeUpsertHooks, useremailHook)
	case boil.AfterInsertHook:
		useremailAfterInsertHooks = append(useremailAfterInsertHooks, useremailHook)
	case boil.AfterSelectHook:
		useremailAfterSelectHooks = append(useremailAfterSelectHooks, useremailHook)
	case boil.AfterUpdateHook:
		useremailAfterUpdateHooks = append(useremailAfterUpdateHooks, useremailHook)
	case boil.AfterDeleteHook:
		useremailAfterDeleteHooks = append(useremailAfterDeleteHooks, useremailHook)
	case boil.AfterUpsertHook:
		useremailAfterUpsertHooks = append(useremailAfterUpsertHooks, useremailHook)
	}
}

// One returns a single useremail record from the query.
func (q useremailQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Useremail, error) {
	o := &Useremail{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for useremails")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Useremail records from the query.
func (q useremailQuery) All(ctx context.Context, exec boil.ContextExecutor) (UseremailSlice, error) {
	var o []*Useremail

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Useremail slice")
	}

	if len(useremailAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Useremail records in the query.
func (q useremailQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count useremails rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q useremailQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if useremails exists")
	}

	return count > 0, nil
}

// RequestorBlocks retrieves all the block's Blocks with an executor via requestor_id column.
func (o *Useremail) RequestorBlocks(mods ...qm.QueryMod) blockQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"blocks\".\"requestor_id\"=?", o.ID),
	)

	query := Blocks(queryMods...)
	queries.SetFrom(query.Query, "\"blocks\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"blocks\".*"})
	}

	return query
}

// TargetBlocks retrieves all the block's Blocks with an executor via target_id column.
func (o *Useremail) TargetBlocks(mods ...qm.QueryMod) blockQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"blocks\".\"target_id\"=?", o.ID),
	)

	query := Blocks(queryMods...)
	queries.SetFrom(query.Query, "\"blocks\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"blocks\".*"})
	}

	return query
}

// FirstFriends retrieves all the friend's Friends with an executor via first_id column.
func (o *Useremail) FirstFriends(mods ...qm.QueryMod) friendQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"friends\".\"first_id\"=?", o.ID),
	)

	query := Friends(queryMods...)
	queries.SetFrom(query.Query, "\"friends\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"friends\".*"})
	}

	return query
}

// SecondFriends retrieves all the friend's Friends with an executor via second_id column.
func (o *Useremail) SecondFriends(mods ...qm.QueryMod) friendQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"friends\".\"second_id\"=?", o.ID),
	)

	query := Friends(queryMods...)
	queries.SetFrom(query.Query, "\"friends\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"friends\".*"})
	}

	return query
}

// RequestorSubscriptions retrieves all the subscription's Subscriptions with an executor via requestor_id column.
func (o *Useremail) RequestorSubscriptions(mods ...qm.QueryMod) subscriptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"subscriptions\".\"requestor_id\"=?", o.ID),
	)

	query := Subscriptions(queryMods...)
	queries.SetFrom(query.Query, "\"subscriptions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"subscriptions\".*"})
	}

	return query
}

// TargetSubscriptions retrieves all the subscription's Subscriptions with an executor via target_id column.
func (o *Useremail) TargetSubscriptions(mods ...qm.QueryMod) subscriptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"subscriptions\".\"target_id\"=?", o.ID),
	)

	query := Subscriptions(queryMods...)
	queries.SetFrom(query.Query, "\"subscriptions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"subscriptions\".*"})
	}

	return query
}

// LoadRequestorBlocks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (useremailL) LoadRequestorBlocks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUseremail interface{}, mods queries.Applicator) error {
	var slice []*Useremail
	var object *Useremail

	if singular {
		object = maybeUseremail.(*Useremail)
	} else {
		slice = *maybeUseremail.(*[]*Useremail)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &useremailR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &useremailR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`blocks`), qm.WhereIn(`blocks.requestor_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blocks")
	}

	var resultSlice []*Block
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice blocks")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blocks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blocks")
	}

	if len(blockAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RequestorBlocks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blockR{}
			}
			foreign.R.Requestor = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RequestorID {
				local.R.RequestorBlocks = append(local.R.RequestorBlocks, foreign)
				if foreign.R == nil {
					foreign.R = &blockR{}
				}
				foreign.R.Requestor = local
				break
			}
		}
	}

	return nil
}

// LoadTargetBlocks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (useremailL) LoadTargetBlocks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUseremail interface{}, mods queries.Applicator) error {
	var slice []*Useremail
	var object *Useremail

	if singular {
		object = maybeUseremail.(*Useremail)
	} else {
		slice = *maybeUseremail.(*[]*Useremail)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &useremailR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &useremailR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`blocks`), qm.WhereIn(`blocks.target_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blocks")
	}

	var resultSlice []*Block
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice blocks")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blocks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blocks")
	}

	if len(blockAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TargetBlocks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blockR{}
			}
			foreign.R.Target = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TargetID {
				local.R.TargetBlocks = append(local.R.TargetBlocks, foreign)
				if foreign.R == nil {
					foreign.R = &blockR{}
				}
				foreign.R.Target = local
				break
			}
		}
	}

	return nil
}

// LoadFirstFriends allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (useremailL) LoadFirstFriends(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUseremail interface{}, mods queries.Applicator) error {
	var slice []*Useremail
	var object *Useremail

	if singular {
		object = maybeUseremail.(*Useremail)
	} else {
		slice = *maybeUseremail.(*[]*Useremail)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &useremailR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &useremailR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`friends`), qm.WhereIn(`friends.first_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load friends")
	}

	var resultSlice []*Friend
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice friends")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on friends")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for friends")
	}

	if len(friendAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FirstFriends = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &friendR{}
			}
			foreign.R.First = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FirstID {
				local.R.FirstFriends = append(local.R.FirstFriends, foreign)
				if foreign.R == nil {
					foreign.R = &friendR{}
				}
				foreign.R.First = local
				break
			}
		}
	}

	return nil
}

// LoadSecondFriends allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (useremailL) LoadSecondFriends(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUseremail interface{}, mods queries.Applicator) error {
	var slice []*Useremail
	var object *Useremail

	if singular {
		object = maybeUseremail.(*Useremail)
	} else {
		slice = *maybeUseremail.(*[]*Useremail)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &useremailR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &useremailR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`friends`), qm.WhereIn(`friends.second_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load friends")
	}

	var resultSlice []*Friend
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice friends")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on friends")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for friends")
	}

	if len(friendAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SecondFriends = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &friendR{}
			}
			foreign.R.Second = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SecondID {
				local.R.SecondFriends = append(local.R.SecondFriends, foreign)
				if foreign.R == nil {
					foreign.R = &friendR{}
				}
				foreign.R.Second = local
				break
			}
		}
	}

	return nil
}

// LoadRequestorSubscriptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (useremailL) LoadRequestorSubscriptions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUseremail interface{}, mods queries.Applicator) error {
	var slice []*Useremail
	var object *Useremail

	if singular {
		object = maybeUseremail.(*Useremail)
	} else {
		slice = *maybeUseremail.(*[]*Useremail)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &useremailR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &useremailR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`subscriptions`), qm.WhereIn(`subscriptions.requestor_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load subscriptions")
	}

	var resultSlice []*Subscription
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice subscriptions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on subscriptions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subscriptions")
	}

	if len(subscriptionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RequestorSubscriptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &subscriptionR{}
			}
			foreign.R.Requestor = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RequestorID {
				local.R.RequestorSubscriptions = append(local.R.RequestorSubscriptions, foreign)
				if foreign.R == nil {
					foreign.R = &subscriptionR{}
				}
				foreign.R.Requestor = local
				break
			}
		}
	}

	return nil
}

// LoadTargetSubscriptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (useremailL) LoadTargetSubscriptions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUseremail interface{}, mods queries.Applicator) error {
	var slice []*Useremail
	var object *Useremail

	if singular {
		object = maybeUseremail.(*Useremail)
	} else {
		slice = *maybeUseremail.(*[]*Useremail)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &useremailR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &useremailR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`subscriptions`), qm.WhereIn(`subscriptions.target_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load subscriptions")
	}

	var resultSlice []*Subscription
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice subscriptions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on subscriptions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subscriptions")
	}

	if len(subscriptionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TargetSubscriptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &subscriptionR{}
			}
			foreign.R.Target = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TargetID {
				local.R.TargetSubscriptions = append(local.R.TargetSubscriptions, foreign)
				if foreign.R == nil {
					foreign.R = &subscriptionR{}
				}
				foreign.R.Target = local
				break
			}
		}
	}

	return nil
}

// AddRequestorBlocks adds the given related objects to the existing relationships
// of the useremail, optionally inserting them as new records.
// Appends related to o.R.RequestorBlocks.
// Sets related.R.Requestor appropriately.
func (o *Useremail) AddRequestorBlocks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Block) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RequestorID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"blocks\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"requestor_id"}),
				strmangle.WhereClause("\"", "\"", 2, blockPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RequestorID = o.ID
		}
	}

	if o.R == nil {
		o.R = &useremailR{
			RequestorBlocks: related,
		}
	} else {
		o.R.RequestorBlocks = append(o.R.RequestorBlocks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blockR{
				Requestor: o,
			}
		} else {
			rel.R.Requestor = o
		}
	}
	return nil
}

// AddTargetBlocks adds the given related objects to the existing relationships
// of the useremail, optionally inserting them as new records.
// Appends related to o.R.TargetBlocks.
// Sets related.R.Target appropriately.
func (o *Useremail) AddTargetBlocks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Block) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TargetID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"blocks\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"target_id"}),
				strmangle.WhereClause("\"", "\"", 2, blockPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TargetID = o.ID
		}
	}

	if o.R == nil {
		o.R = &useremailR{
			TargetBlocks: related,
		}
	} else {
		o.R.TargetBlocks = append(o.R.TargetBlocks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blockR{
				Target: o,
			}
		} else {
			rel.R.Target = o
		}
	}
	return nil
}

// AddFirstFriends adds the given related objects to the existing relationships
// of the useremail, optionally inserting them as new records.
// Appends related to o.R.FirstFriends.
// Sets related.R.First appropriately.
func (o *Useremail) AddFirstFriends(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Friend) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FirstID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"friends\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"first_id"}),
				strmangle.WhereClause("\"", "\"", 2, friendPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FirstID = o.ID
		}
	}

	if o.R == nil {
		o.R = &useremailR{
			FirstFriends: related,
		}
	} else {
		o.R.FirstFriends = append(o.R.FirstFriends, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &friendR{
				First: o,
			}
		} else {
			rel.R.First = o
		}
	}
	return nil
}

// AddSecondFriends adds the given related objects to the existing relationships
// of the useremail, optionally inserting them as new records.
// Appends related to o.R.SecondFriends.
// Sets related.R.Second appropriately.
func (o *Useremail) AddSecondFriends(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Friend) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SecondID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"friends\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"second_id"}),
				strmangle.WhereClause("\"", "\"", 2, friendPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SecondID = o.ID
		}
	}

	if o.R == nil {
		o.R = &useremailR{
			SecondFriends: related,
		}
	} else {
		o.R.SecondFriends = append(o.R.SecondFriends, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &friendR{
				Second: o,
			}
		} else {
			rel.R.Second = o
		}
	}
	return nil
}

// AddRequestorSubscriptions adds the given related objects to the existing relationships
// of the useremail, optionally inserting them as new records.
// Appends related to o.R.RequestorSubscriptions.
// Sets related.R.Requestor appropriately.
func (o *Useremail) AddRequestorSubscriptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Subscription) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RequestorID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"subscriptions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"requestor_id"}),
				strmangle.WhereClause("\"", "\"", 2, subscriptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RequestorID = o.ID
		}
	}

	if o.R == nil {
		o.R = &useremailR{
			RequestorSubscriptions: related,
		}
	} else {
		o.R.RequestorSubscriptions = append(o.R.RequestorSubscriptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &subscriptionR{
				Requestor: o,
			}
		} else {
			rel.R.Requestor = o
		}
	}
	return nil
}

// AddTargetSubscriptions adds the given related objects to the existing relationships
// of the useremail, optionally inserting them as new records.
// Appends related to o.R.TargetSubscriptions.
// Sets related.R.Target appropriately.
func (o *Useremail) AddTargetSubscriptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Subscription) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TargetID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"subscriptions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"target_id"}),
				strmangle.WhereClause("\"", "\"", 2, subscriptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TargetID = o.ID
		}
	}

	if o.R == nil {
		o.R = &useremailR{
			TargetSubscriptions: related,
		}
	} else {
		o.R.TargetSubscriptions = append(o.R.TargetSubscriptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &subscriptionR{
				Target: o,
			}
		} else {
			rel.R.Target = o
		}
	}
	return nil
}

// Useremails retrieves all the records using an executor.
func Useremails(mods ...qm.QueryMod) useremailQuery {
	mods = append(mods, qm.From("\"useremails\""))
	return useremailQuery{NewQuery(mods...)}
}

// FindUseremail retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUseremail(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Useremail, error) {
	useremailObj := &Useremail{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"useremails\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, useremailObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from useremails")
	}

	return useremailObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Useremail) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no useremails provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(useremailColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	useremailInsertCacheMut.RLock()
	cache, cached := useremailInsertCache[key]
	useremailInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			useremailAllColumns,
			useremailColumnsWithDefault,
			useremailColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(useremailType, useremailMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(useremailType, useremailMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"useremails\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"useremails\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into useremails")
	}

	if !cached {
		useremailInsertCacheMut.Lock()
		useremailInsertCache[key] = cache
		useremailInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Useremail.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Useremail) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	useremailUpdateCacheMut.RLock()
	cache, cached := useremailUpdateCache[key]
	useremailUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			useremailAllColumns,
			useremailPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update useremails, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"useremails\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, useremailPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(useremailType, useremailMapping, append(wl, useremailPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update useremails row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for useremails")
	}

	if !cached {
		useremailUpdateCacheMut.Lock()
		useremailUpdateCache[key] = cache
		useremailUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q useremailQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for useremails")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for useremails")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UseremailSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), useremailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"useremails\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, useremailPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in useremail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all useremail")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Useremail) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no useremails provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(useremailColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	useremailUpsertCacheMut.RLock()
	cache, cached := useremailUpsertCache[key]
	useremailUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			useremailAllColumns,
			useremailColumnsWithDefault,
			useremailColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			useremailAllColumns,
			useremailPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert useremails, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(useremailPrimaryKeyColumns))
			copy(conflict, useremailPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"useremails\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(useremailType, useremailMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(useremailType, useremailMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert useremails")
	}

	if !cached {
		useremailUpsertCacheMut.Lock()
		useremailUpsertCache[key] = cache
		useremailUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Useremail record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Useremail) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Useremail provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), useremailPrimaryKeyMapping)
	sql := "DELETE FROM \"useremails\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from useremails")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for useremails")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q useremailQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no useremailQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from useremails")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for useremails")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UseremailSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(useremailBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), useremailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"useremails\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, useremailPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from useremail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for useremails")
	}

	if len(useremailAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Useremail) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUseremail(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UseremailSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UseremailSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), useremailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"useremails\".* FROM \"useremails\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, useremailPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in UseremailSlice")
	}

	*o = slice

	return nil
}

// UseremailExists checks if the Useremail row exists.
func UseremailExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"useremails\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if useremails exists")
	}

	return exists, nil
}
